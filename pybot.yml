resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: telegram-notification
  type: docker-image
  source:
    repository: cuttlerat/concourse-telegram-resource
    tag: latest

resources:

- name: docker-image
  type: docker-image
  source:
    repository: cuttlerat/pybot
    username: ((registry_username))
    password: ((registry_password))
    tag: latest

- name: pybot-pull-request
  type: pull-request
  source:
    repo: cuttlerat/pybot
    access_token: ((access_token))
    only_mergeable: true
    ci_skip: true
    private_key: ((pybot_private_key))
    
- name: pybot
  type: git
  source:
    uri: git@github.com:cuttlerat/pybot.git
    branch: master
    private_key: ((pybot_private_key))

- name: telegram
  type: telegram-notification
  source: &telegram
    bot_token: ((telegram_token))
    chat_id: ((telegram_chat_id))
    ci_url: ((ci_url))
    admins: ((telegram_admins))
    command: "/build"

- name: telegram-pr
  type: telegram-notification
  source:
    <<: *telegram
    admins: ((telegram_pr_admins))
    command: "/merge"

jobs:

  - name: "Test"
    public: true
    plan:
      - aggregate:
        - get: pybot
          trigger: true
        - get: telegram
          trigger: true
        - put: telegram
          params:
            message: "Build triggered"
      - task: "Running tests"
        file: pybot/.concourse.yml
        params:
          WEATHER_TOKEN: "((weather_token))"
          TG_TOKEN: "((telegram_token))"

  - name: "Test PR"
    public: true
    plan:
      - aggregate:
        - get: pybot
        - get: pybot-pull-request
          trigger: true
          on_success:
            put: pybot-pull-request
            params:
              path: pybot-pull-request
              status: pending
        - put: telegram
          params:
            message: "PR {} tests is triggered"
            message_file: pybot-pull-request/.git/id
      - task: "Copy concourse file to new branch"
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: 3.7
          inputs:
            - name: pybot-pull-request
            - name: pybot
          outputs:
            - name: pybot-pr-tests
          run:
            path: sh
            args:
              - -exc
              - |
                cp -r pybot-pull-request/. pybot-pr-tests
                cp pybot/.concourse.yml pybot-pr-tests
                sed -i 's/pybot/pybot-pr-tests/' pybot-pr-tests/.concourse.yml

      - task: "Running tests"
        file: pybot-pr-tests/.concourse.yml
        params:
          WEATHER_TOKEN: "((weather_token))"
          TG_TOKEN: "((telegram_token))"
        on_success:
          put: pybot-pull-request
          params:
            path: pybot-pull-request
            status: success
        on_failure:
          put: pybot-pull-request
          params:
            path: pybot-pull-request
            status: failure

  - name: "Merge PR"
    public: true
    plan:
      - get: pybot-pull-request
        passed:
          - "Test PR"
      - get: telegram-pr
        trigger: true
      - put: pybot-pull-request
        params:
          path: pybot-pull-request
          status: success
          merge:
            method: "merge"
        on_success:
          put: telegram-pr
          params:
            message: "PR {} is merged"
            message_file: pybot-pull-request/.git/id
        on_failure:
          put: telegram-pr
          params:
            message: "PR {} is not merged"
            message_file: pybot-pull-request/.git/id
    

  - name: "Build"
    public: true
    plan:
      - get: pybot
        trigger: true
        passed:
          - "Test"
      - aggregate:
        - task: "Get tag from commit hash"
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: alpine/git
            inputs:
              - name: pybot
            outputs:
              - name: tag
            run:
              dir: pybot
              path: sh
              args:
                - -exc
                - |
                  git rev-parse --short HEAD > ../tag/git_rev
      - put: docker-image
        params:
          build: pybot
          tag: tag/git_rev
          tag_as_latest: true
          dockerfile: pybot/dockerfile/pybot.Dockerfile

            
  - name: "Deploy"
    public: true
    plan:
      - get: docker-image
        trigger: true
        params:
          skip_download: true
        passed:
          - "Build"
      - task: "Send update to webhook"
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: "tutum/curl"
              tag: "alpine"
          run:
            path: sh
            args:
              - -ec
              - |
                [[ "$(curl -s ((webhook)))" ]] && exit 1 || exit 0
        on_failure:
          put: telegram
          params:
            message: "Trouble during update"
        on_success:
          put: telegram
          params:
            message: "Updated"
